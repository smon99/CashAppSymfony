<?php declare(strict_types=1);

namespace App\Tests\Unit\Component\User\Persistence;

use App\Component\User\Persistence\Mapper\UserMapper;
use App\DTO\UserDTO;
use App\Entity\User;
use App\Repository\UserRepository;
use PHPUnit\Framework\TestCase;

class UserRepositoryTest extends TestCase
{
    private UserDTO $userDTO;
    private User $user;

    protected function setUp(): void
    {
        $this->userDTO = new UserDTO();

        $this->userDTO->setUsername('Tester');
        $this->userDTO->setEmail('Tester@Tester.de');
        $this->userDTO->setPassword('Test123#');

        $this->user = new User();
        $this->user->setUsername('Tester');
        $this->user->setEmail('Tester@Tester.de');
        $this->user->setPassword('Test123#');
        $this->user->setId(1);

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testByEmail(): void
    {
        $userRepository = new \App\Component\User\Persistence\UserRepository(
            $this->getAppUserRepositoryStub($this->user),
            new UserMapper(),
        );

        self::assertSame($this->userDTO->getUsername(), $userRepository->byEmail('Tester@Tester.de')->getUsername());
    }

    public function testByEmailMock(): void
    {
        $email = 'Tester@Tester.de';

        $userRepository = new \App\Component\User\Persistence\UserRepository(
            $this->getAppUserRepositoryMock($email),
            new UserMapper()
        );

        self::assertSame($this->userDTO->getUsername(), $userRepository->byEmail('Tester@Tester.de')->getUsername());
    }

    private function getAppUserRepositoryStub(User $user): UserRepository|\PHPUnit\Framework\MockObject\Stub
    {
        $appUserRepositoryStub = $this->createStub(UserRepository::class);
        $appUserRepositoryStub->method('findOneBy')
            ->willReturn($user);

        return $appUserRepositoryStub;
    }

    private function getAppUserRepositoryMock($email): UserRepository|\PHPUnit\Framework\MockObject\MockObject
    {
        $appUserRepositoryMock = $this->createMock(UserRepository::class);
        $appUserRepositoryMock->expects($this->once())
            ->method('findOneBy')
            ->with(['email' => $email])
            ->willReturn($this->user);

        return $appUserRepositoryMock;
    }
}