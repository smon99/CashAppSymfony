<?php declare(strict_types=1);

namespace App\Tests\Unit\Component\User\Persistence\Mapper;

use App\Component\User\Persistence\Mapper\UserMapper;
use App\DTO\UserDTO;
use App\Entity\User;
use PHPUnit\Framework\TestCase;

class UserMapperTest extends TestCase
{
    private UserMapper $userMapper;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->userMapper = new UserMapper();
    }

    public function testEntityToDto(): void
    {
        $entity = new User();

        $entity->setId(1);
        $entity->setUsername('Tester');
        $entity->setEmail('Tester@Tester.de');
        $entity->setPassword('Tester123#');

        self::assertSame($entity->getId(), $this->userMapper->entityToDto($entity)->getId());
        self::assertSame($entity->getUsername(), $this->userMapper->entityToDto($entity)->getUsername());
        self::assertSame($entity->getEmail(), $this->userMapper->entityToDto($entity)->getEmail());
        self::assertSame($entity->getPassword(), $this->userMapper->entityToDto($entity)->getPassword());
    }

    public function testDtoToEntity(): void
    {
        $userDto = new UserDTO();

        $userDto->setUsername('Tester');
        $userDto->setEmail('Tester@Tester.de');
        $userDto->setPassword('Tester123#');

        self::assertSame($userDto->getUsername(), $this->userMapper->dtoToEntity($userDto)->getUsername());
        self::assertSame($userDto->getEmail(), $this->userMapper->dtoToEntity($userDto)->getEmail());
        self::assertSame($userDto->getPassword(), $this->userMapper->dtoToEntity($userDto)->getPassword());
    }
}